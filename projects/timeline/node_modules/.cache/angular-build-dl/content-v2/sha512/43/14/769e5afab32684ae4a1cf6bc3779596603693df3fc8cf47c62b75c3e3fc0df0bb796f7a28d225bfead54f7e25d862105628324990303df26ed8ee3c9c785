function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"], {
  /***/
  "./$$_lazy_route_resource lazy recursive":
  /*!******************************************************!*\
    !*** ./$$_lazy_route_resource lazy namespace object ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function $$_lazy_route_resourceLazyRecursive(module, exports) {
    function webpackEmptyAsyncContext(req) {
      // Here Promise.resolve().then() is used instead of new Promise() to prevent
      // uncaught exception popping up in devtools
      return Promise.resolve().then(function () {
        var e = new Error("Cannot find module '" + req + "'");
        e.code = 'MODULE_NOT_FOUND';
        throw e;
      });
    }

    webpackEmptyAsyncContext.keys = function () {
      return [];
    };

    webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
    module.exports = webpackEmptyAsyncContext;
    webpackEmptyAsyncContext.id = "./$$_lazy_route_resource lazy recursive";
    /***/
  },

  /***/
  "./projects/timeline/src/lib/timeline.component.ts":
  /*!*********************************************************!*\
    !*** ./projects/timeline/src/lib/timeline.component.ts ***!
    \*********************************************************/

  /*! exports provided: DateUtil, TimelineComponent */

  /***/
  function projectsTimelineSrcLibTimelineComponentTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DateUtil", function () {
      return DateUtil;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TimelineComponent", function () {
      return TimelineComponent;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var dayjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! dayjs */
    "./node_modules/dayjs/dayjs.min.js");
    /* harmony import */


    var dayjs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_1__);
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");

    var _c0 = ["timeline"];

    var DateUtil = /*#__PURE__*/function () {
      function DateUtil() {
        _classCallCheck(this, DateUtil);
      }

      _createClass(DateUtil, null, [{
        key: "formatDate",

        /**
         * 日期格式为string
         * @param date 日期
         * @param format 格式参数
         */
        value: function formatDate(date, format) {
          // return dateFormat(format, date);
          return dayjs__WEBPACK_IMPORTED_MODULE_1__(date).format(format);
        }
      }]);

      return DateUtil;
    }();

    var TimelineComponent = /*#__PURE__*/function () {
      function TimelineComponent() {
        _classCallCheck(this, TimelineComponent);

        // Canvas scale is adjusted according to outer height
        this._scale = 20; // The height of the outer canvas

        this._canvasHeight = 50; // Video playback time

        this._playTime = new Date().getTime(); // The video plays at twice the speed

        this._speed = 1; // Video fast forward value

        this._forWardValue = 5; // Start time limit: Timestamp

        this._startTimeThreshold = new Date().getTime() - 1 * 12 * 3600 * 1000; // End time limit: Timestamp

        this._endTimeThreshold = new Date().getTime() + 1 * 12 * 3600 * 1000; // The position of the X-axis when the mouse is pressed

        this.gMousedownCursor = undefined; // The position of the y-axis when the mouse is pressed

        this.gMousedownCursorY = undefined; // this.startTimeThreshold = new Date().getTime() - 1 * 0.5 * 3600 * 1000;
        // this.endTimeThreshold = new Date().getTime() + 1 * 1 * 3600 * 1000;

        this.playClick = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.mouseUp = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.mouseDown = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.keyUp = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.keyDown = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.isPlayClick = false;
        this.videoCells = [{
          beginTime: new Date().getTime() - 3 * 3600 * 1000,
          endTime: new Date().getTime() - 1 * 3600 * 1000,
          style: {
            background: 'rgba(132, 244, 180, 0.498039)'
          }
        }, {
          beginTime: new Date().getTime() - 6 * 3600 * 1000,
          endTime: new Date().getTime() - 4 * 3600 * 1000,
          style: {
            background: 'rgba(132, 244, 180, 0.498039)'
          }
        }];
      }

      _createClass(TimelineComponent, [{
        key: "onResize",

        /**
         * Browser change event
         */
        value: function onResize() {
          this.canvas.width = Math.round(this.canvas.parentNode.offsetWidth - 2);
          this.canvasW = this.canvas.parentNode.offsetWidth;
          this.init(this.startTimestamp, this.timecell, false);
        }
        /**
         * Keyboard press event
         */

      }, {
        key: "onKeyDown",
        value: function onKeyDown(event) {
          if (Number(event.keyCode) === 37) {
            this.playTime = Number(this.playTime) - this.forWardValue;
            this.currentTimestamp = Number(this.currentTimestamp) - this.forWardValue;
            this.set_time_to_middle(this.playTime);
          } else if (Number(event.keyCode === 39)) {
            this.playTime = Number(this.playTime) + this.forWardValue;
            this.currentTimestamp = Number(this.currentTimestamp) + this.forWardValue;
            this.set_time_to_middle(this.playTime);
          }

          this.keyDown.emit(this.playTime);
        }
        /**
         * Keyboard release event
         */

      }, {
        key: "onKeyUp",
        value: function onKeyUp(event) {
          if (Number(event.keyCode) === 13 || Number(event.keyCode === 32)) {
            this.isPlayClick ? this.onPauseClick() : this.onPlayClick();
          }

          this.keyUp.emit(this.playTime);
        }
      }, {
        key: "ngOnInit",
        value: function ngOnInit() {
          // Initialize data video group event stamp to show new Date().getTime()- number of hours
          // Assign the Canvas DOM to the variable Canvas
          this.canvas = this.canvasExp.nativeElement; // Define the area of the canvas

          this.ctx = this.canvas.getContext('2d'); // Redefine the width of the canvas. The default canvas is 300. Assign the width of the parent element

          this.canvas.width = Math.round(this.canvas.parentNode.offsetWidth - 2); // Store the width and height of the canvas

          this.canvasW = this.canvas.width;
          this.canvas.height = this.canvasHeight;
          this.canvasH = this.canvas.height; // Assign the video array to Timecell

          this.timecell = this.videoCells; // Initialize the number of steps per minute

          this.minutesPerStep = [1, 2, 5, 10, 15, 20, 30, 60, 120, 180, 240, 360, 720, 1440]; // Initialization style

          this.verticalBarColor = 'rgba(0,0,0,1)';
          this.bottomLineColor = 'rgba(0,0,0,1)';
          this.borderColor = '#fff';
          this.bgColor = '#fff';
          this.playBarColor = '#448aff'; // Minimum width between scales, in units of px 20px

          this.graduationStep = 20; // The timeline shows the time rounded up according to the time threshold

          this.hoursPerRuler = Math.ceil((Number(this.endTimeThreshold) - Number(this.startTimeThreshold)) / 1000 / 3600) < 24 ? Math.ceil((Number(this.endTimeThreshold) - Number(this.startTimeThreshold)) / 1000 / 3600) : 24; // The leftmost timestamp defaults to 12 hours before the current time

          this.startTimestamp = Number(this.startTimeThreshold); // Default distance 80

          this.distanceBetweenGtitle = 80; // Default zoom 24

          this.zoom = 24; // Default false

          this.gIsMousedown = false;
          this.gIsMousemove = false;
          this.gMousedownCursor = undefined; // px/ms

          this.pxPerMs = this.canvasW / (this.hoursPerRuler * 3600 * 1000); // The initial X position of the playback icon is in the middle of the scale

          this.playBarOffsetX = this.canvasW / 2;
          this.playBarDistanceLeft = this.playBarOffsetX / this.pxPerMs / 3600 / 1000 / this.hoursPerRuler;
          this.currentTimestamp = this.startTimestamp + this.hoursPerRuler * this.playBarDistanceLeft * 3600 * 1000;
          this.playBarOffsetX1 = this.playBarOffsetX - this.scale * 0.6;
          this.playBarOffsetX2 = this.playBarOffsetX + this.scale * 0.6;
          this.playBarOffsetY1 = this.scale * 2.5;
          this.playBarOffsetY2 = this.scale * 3.5; // Initialize the timeline

          this.init(this.startTimestamp, this.timecell, false); // Draw the play button

          this.drawPalyBar();
        }
      }, {
        key: "ngOnChanges",
        value: function ngOnChanges(changes) {
          var _this = this;

          // Refactor the playback component when the width and height change
          if (changes.canvasHeight) {
            this.canvasHeight = changes.canvasHeight.currentValue; // Assign the Canvas DOM to the variable Canvas

            this.canvas = this.canvasExp.nativeElement; // Define the area of the canvas

            this.ctx = this.canvas.getContext('2d'); // Redefine the width of the canvas. The default canvas is 300. Assign the width of the parent element

            this.canvas.width = Math.round(this.canvas.parentNode.offsetWidth - 2); // Store the width and height of the canvas

            this.canvasW = this.canvas.width;
            this.canvas.height = this.canvasHeight;
            this.canvasH = this.canvas.height; // Assign the video array to Timecell

            this.timecell = this.videoCells;
            this.minutesPerStep = [1, 2, 5, 10, 15, 20, 30, 60, 120, 180, 240, 360, 720, 1440]; // The timeline shows the time rounded up according to the time threshold

            this.hoursPerRuler = Math.ceil((Number(this.endTimeThreshold) - Number(this.startTimeThreshold)) / 1000 / 3600) < 24 ? Math.ceil((Number(this.endTimeThreshold) - Number(this.startTimeThreshold)) / 1000 / 3600) : 24; // The leftmost timestamp defaults to 12 hours before the current time

            this.startTimestamp = Number(this.startTimeThreshold);
            this.pxPerMs = this.canvasW / (this.hoursPerRuler * 3600 * 1000); // The initial X position of the playback icon is in the middle of the scale

            this.playBarOffsetX = this.canvasW / 2;
            this.playBarDistanceLeft = this.playBarOffsetX / this.pxPerMs / 3600 / 1000 / this.hoursPerRuler; // Current timestamp

            this.currentTimestamp = this.startTimestamp + this.hoursPerRuler * this.playBarDistanceLeft * 3600 * 1000;
            this.playBarOffsetX1 = this.playBarOffsetX - this.scale * 0.6;
            this.playBarOffsetX2 = this.playBarOffsetX + this.scale * 0.6;
            this.playBarOffsetY1 = this.scale * 2.5;
            this.playBarOffsetY2 = this.scale * 3.5;
            this.init(this.startTimestamp, this.timecell, false);
            this.drawPalyBar();
          }

          if (changes.videoCells) {
            this.videoCells = changes.videoCells.currentValue;
            this.timecell = this.videoCells;
            this.add_cells(this.timecell); // this.init(this.startTimestamp, this.timecell, true);
            // this.drawPalyBar();
          }

          if (changes.startTimeThreshold) {
            this.startTimeThreshold = changes.startTimeThreshold.currentValue;
            this.hoursPerRuler = Math.ceil((Number(this.endTimeThreshold) - Number(this.startTimeThreshold)) / 1000 / 3600) < 24 ? Math.ceil((Number(this.endTimeThreshold) - Number(this.startTimeThreshold)) / 1000 / 3600) : 24;
            this.startTimestamp = Number(this.startTimeThreshold); // this.init(this.startTimestamp, this.timecell, false);
          }

          if (changes.endTimeThreshold) {
            this.endTimeThreshold = changes.endTimeThreshold.currentValue;
            this.hoursPerRuler = Math.ceil((Number(this.endTimeThreshold) - Number(this.startTimeThreshold)) / 1000 / 3600) < 24 ? Math.ceil((Number(this.endTimeThreshold) - Number(this.startTimeThreshold)) / 1000 / 3600) : 24;
          }

          if (changes.playTime) {
            this.playTime = changes.playTime.currentValue; // use SetTimeOut Timer to make it  asynchronous

            setTimeout(function () {
              _this.set_time_to_middle(new Date(_this.playTime).getTime());
            }, 100);
          }

          if (changes.speed) {
            this.speed = changes.speed.currentValue;
          }

          if (changes.forWardValue) {
            this.forWardValue = changes.forWardValue.currentValue;
          }

          if (changes.isPlayClick) {
            if (changes.isPlayClick.currentValue) {
              this.onPlayClick();
            } else {
              this.onPauseClick();
            }
          }
        }
        /**
         * Initialize
         * @param  startTimestamp Leftmost time
         * @param  timecell Video segment array
         * @param  redrawFlag Whether to redraw the mark
         */

      }, {
        key: "init",
        value: function init(startTimestamp, timecell, redrawFlag) {
          this.timecell = timecell;
          this.startTimestamp = startTimestamp;

          if (this.currentTimestamp >= this.endTimeThreshold) {
            this.startTimestamp = Number(this.endTimeThreshold) - this.hoursPerRuler * this.playBarDistanceLeft * 1000 * 3600;
            this.currentTimestamp = Number(this.startTimestamp) + this.hoursPerRuler * this.playBarDistanceLeft * 1000 * 3600;
            this.playTime = Number(this.startTimestamp) + this.hoursPerRuler * this.playBarDistanceLeft * 1000 * 3600;
          } else if (this.currentTimestamp <= this.startTimeThreshold) {
            this.startTimestamp = Number(this.startTimeThreshold) - this.hoursPerRuler * this.playBarDistanceLeft * 1000 * 3600;
            this.currentTimestamp = Number(this.startTimestamp) + this.hoursPerRuler * this.playBarDistanceLeft * 1000 * 3600;
            this.playTime = Number(this.startTimestamp) + this.hoursPerRuler * this.playBarDistanceLeft * 1000 * 3600;
          }

          this.drawCellBg();
          this.add_graduations(startTimestamp);
          this.add_cells(timecell); // Draw the verticalBar

          this.drawLine(0, this.canvasH, this.canvasW, this.canvasH, this.bottomLineColor, 1);
        }
        /**
         * Draw add scale
         * @param  startTimestamp Leftmost time
         */

      }, {
        key: "add_graduations",
        value: function add_graduations(startTimestamp) {
          // px/min
          var pxPerMin = this.canvasW / (this.hoursPerRuler * 60); // px/ms

          var pxPerMs = this.canvasW / (this.hoursPerRuler * 60 * 60 * 1000); // The default minimum value of PX/steo is 20px

          var pxPerStep = this.graduationStep; // Min/steo

          var minPerStep = pxPerStep / pxPerMin;

          var _iterator = _createForOfIteratorHelper(this.minutesPerStep),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var v = _step.value;

              if (minPerStep <= v) {
                // Keep each cell within the range specified by minutesPerStep
                minPerStep = v;
                pxPerStep = pxPerMin * minPerStep;
                break;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          var mediumStep = 30;

          var _iterator2 = _createForOfIteratorHelper(this.minutesPerStep),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _v = _step2.value;

              if (this.distanceBetweenGtitle / pxPerMin <= _v) {
                mediumStep = _v;
                break;
              }
            } // The total number

          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          var numSteps = this.canvasW / pxPerStep;
          var graduationLeft;
          var graduationTime;
          var caretClass;
          var lineH; // The initial offset time (ms)

          var msOffset = this.ms_to_next_step(startTimestamp, minPerStep * 60 * 1000); // The initial offset is (px)

          var pxOffset = msOffset * pxPerMs; // ms/step

          var msPerStep = pxPerStep / pxPerMs;

          for (var i = 0; i < numSteps; i++) {
            // Distance = offset distance to start + steps *px/ steps
            graduationLeft = pxOffset + i * pxPerStep; // Time = left start time + offset time + steps *ms/ steps

            graduationTime = Number(startTimestamp) + Number(msOffset) + i * Number(msPerStep);
            var date = new Date(graduationTime);

            if (date.getUTCHours() === 0 && date.getUTCMinutes() === 0) {
              caretClass = 'big';
              lineH = this.scale * 1.25;
              var bigDate = DateUtil.formatDate(date, 'HH:mm:ss');
              this.ctx.textAlign = 'center';
              this.ctx.fillText(bigDate, graduationLeft, this.scale * 1.5);
              this.ctx.fillStyle = this.verticalBarColor;
            } else if (graduationTime / (60 * 1000) % mediumStep === 0) {
              caretClass = 'middle';
              lineH = this.scale * 0.75;
              var middleDate = DateUtil.formatDate(date, 'HH:mm:ss');
              this.ctx.textAlign = 'center';
              this.ctx.fillText(middleDate, graduationLeft, this.scale * 1.5);
              this.ctx.fillStyle = this.verticalBarColor;
            } else {
              lineH = this.scale * 0.5;
            } // drawLine(graduationLeft,0,graduationLeft,lineH,"rgba(151,158,167,0.4)",1);


            this.drawLine(graduationLeft, 0, graduationLeft, lineH, this.verticalBarColor, 1);
          }
        }
        /**
         * Draw the play button
         */

      }, {
        key: "drawPalyBar",
        value: function drawPalyBar() {
          this.ctx.beginPath();
          this.ctx.moveTo(this.playBarOffsetX, 0);
          this.ctx.lineTo(this.playBarOffsetX, this.scale * 1.75);
          this.ctx.strokeStyle = this.playBarColor;
          this.ctx.stroke();
          this.ctx.moveTo(this.playBarOffsetX, this.scale * 1.75);
          this.ctx.lineTo(this.playBarOffsetX, this.scale * 1.75);
          this.ctx.lineTo(this.playBarOffsetX - this.scale * 0.6, this.scale * 2.5);
          this.ctx.lineTo(this.playBarOffsetX - this.scale * 0.6, this.scale * 3.5);
          this.ctx.lineTo(this.playBarOffsetX + this.scale * 0.6, this.scale * 3.5);
          this.ctx.lineTo(this.playBarOffsetX + this.scale * 0.6, this.scale * 2.5);
          this.ctx.lineTo(this.playBarOffsetX, this.scale * 1.75);
          this.ctx.fillStyle = this.playBarColor;
          this.ctx.fill();
          this.ctx.closePath(); // this.init(this.startTimestamp, this.timecell, false);

          var time = Number(this.currentTimestamp);
          this.ctx.fillStyle = this.playBarColor;
          this.ctx.textAlign = 'center';
          this.ctx.fillText(DateUtil.formatDate(new Date(time), 'YYYY-MM-DD HH:mm:ss'), this.playBarOffsetX, this.scale * 4.25);
        }
        /**
         * Draw the line
         * @param  beginX The X-axis to start with
         * @param  beginY The Y-axis to start with
         * @param  endX The end of the X-axis
         * @param  endY The end of the Y-axis
         * @param  color color
         * @param  width width
         */

      }, {
        key: "drawLine",
        value: function drawLine(beginX, beginY, endX, endY, color, width) {
          this.ctx.beginPath();
          this.ctx.moveTo(beginX, beginY);
          this.ctx.lineTo(endX, endY);
          this.ctx.strokeStyle = color;
          this.ctx.lineWidth = width;
          this.ctx.stroke();
        }
        /**
         * Add video segment
         * @param  cells Video array
         */

      }, {
        key: "add_cells",
        value: function add_cells(cells) {
          var _this2 = this;

          cells.forEach(function (cell) {
            _this2.draw_cell(cell);
          });
        }
        /**
         * Draw video blocks
         * @param  cell The cell includes beginTime Ms; The endTime ms; style;
         */

      }, {
        key: "draw_cell",
        value: function draw_cell(cell) {
          var pxPerMs = this.canvasW / (this.hoursPerRuler * 60 * 60 * 1000); // px/ms

          var beginX = (cell.beginTime - this.startTimestamp) * pxPerMs;
          var cellWidth = (cell.endTime - cell.beginTime) * pxPerMs;
          this.ctx.fillStyle = cell.style.background;
          this.ctx.fillRect(beginX, 0, cellWidth, this.scale * 0.75);
        }
        /**
         * Draws the background of the video block
         */

      }, {
        key: "drawCellBg",
        value: function drawCellBg() {
          this.ctx.fillStyle = 'rgba(69, 72, 76, 0.5)';
          this.ctx.fillRect(0, 0, this.canvasW, 0);
        }
        /**
         * Drag/click the Mousedown event
         */

      }, {
        key: "mousedownFunc",
        value: function mousedownFunc(e) {
          this.gIsMousedown = true;
          this.gMousedownCursor = this.get_cursor_x_position(e).posX;
          this.gMousedownCursorY = this.get_cursor_x_position(e).posY;
        }
        /**
         * Drag/mouse hover to display mousemove events
         */

      }, {
        key: "mousemoveFunc",
        value: function mousemoveFunc(e) {
          this.clearCanvas();
          var posX = this.get_cursor_x_position(e).posX;
          var pxPerMs = this.canvasW / (this.hoursPerRuler * 3600 * 1000);
          var diffX = posX - this.gMousedownCursor;

          if (this.gIsMousedown) {
            if (this.gMousedownCursor >= this.playBarOffsetX1 && this.gMousedownCursor <= this.playBarOffsetX2 && this.gMousedownCursorY >= this.playBarOffsetY1 && this.gMousedownCursorY <= this.playBarOffsetY2) {
              // this.playBarDistanceLeft = this.playBarOffsetX / this.pxPerMs / 3600 / 1000 / this.hoursPerRuler;
              // this.playBarOffsetX = posX;
              // this.playBarOffsetX1 = this.playBarOffsetX - (this.scale * 0.6);
              // this.playBarOffsetX2 = this.playBarOffsetX + (this.scale * 0.6);
              this.startTimestamp = this.startTimestamp + Math.round(diffX / pxPerMs);
              this.currentTimestamp = this.startTimestamp + Math.round(this.playBarOffsetX / pxPerMs);
              this.drawPalyBar();
              this.init(this.startTimestamp, this.timecell, false);
              this.gIsMousemove = true;
            } else {
              this.startTimestamp = this.startTimestamp - Math.round(diffX / pxPerMs);
              this.currentTimestamp = this.startTimestamp + Math.round(this.playBarOffsetX / pxPerMs);
              this.drawPalyBar();
              this.init(this.startTimestamp, this.timecell, true);
              this.gIsMousemove = true;
              this.gMousedownCursor = posX;
            }

            this.mouseUp.emit(this.currentTimestamp);
          } else {
            var time = this.startTimestamp + posX / pxPerMs;
            this.drawPalyBar();
            this.init(this.startTimestamp, this.timecell, true);
            this.drawLine(posX, 0, posX, 50, 'rgb(194, 202, 215)', 1);
            this.ctx.fillStyle = 'rgb(194, 202, 215)';
            this.ctx.textAlign = 'center';
            this.ctx.fillText(DateUtil.formatDate(new Date(time), 'YYYY-MM-DD HH:mm:ss'), posX, this.scale * 3);
          }
        }
        /**
         * Drag/click the Mouseup event
         */

      }, {
        key: "mouseupFunc",
        value: function mouseupFunc(e) {
          if (this.gIsMousemove) {
            // Drag events
            this.gIsMousemove = false;
            this.gIsMousedown = false;
            this.playTime = this.startTimestamp + this.hoursPerRuler * this.playBarDistanceLeft * 3600 * 1000;
          } else {
            // Click event
            this.gIsMousedown = false; // Mouse distance (px)

            var posx = this.get_cursor_x_position(e).posX; // ms/px

            var msPerPx = this.zoom * 3600 * 1000 / this.canvasW;
            this.playTime = this.startTimestamp + posx * msPerPx;
            this.set_time_to_middle(this.playTime);
          }

          this.mouseDown.emit(this.playTime);
        }
        /**
         * Mouseout of the hidden time mouseout event
         */

      }, {
        key: "mouseoutFunc",
        value: function mouseoutFunc() {
          this.clearCanvas(); // px/ms

          var pxPerMs = this.canvasW / (this.hoursPerRuler * 3600 * 1000);
          this.currentTimestamp = this.startTimestamp + Math.round(this.playBarOffsetX / pxPerMs);
          this.drawPalyBar();
          this.init(this.startTimestamp, this.timecell, true);
        }
        /**
         * Scroll to the center of the timeline for the mousewheel event
         */

      }, {
        key: "mousewheelFunc",
        value: function mousewheelFunc(event) {
          if (event && event.preventDefault) {
            event.preventDefault();
          } else {
            window.event.returnValue = false;
            return false;
          }

          var e = window.event || event;
          var delta = Math.max(-1, Math.min(1, e.wheelDelta || -e.detail)); // Ms Remember the current middle time

          var middleTime = this.startTimestamp + this.hoursPerRuler * this.playBarDistanceLeft * 3600 * 1000;

          if (delta < 0) {
            this.zoom = this.zoom + 4;

            if (this.zoom >= 24) {
              // Shrink to a minimum of 24 hours
              this.zoom = 24;
            }

            this.hoursPerRuler = this.zoom;
          } else if (delta > 0) {
            // amplification
            this.zoom = this.zoom - 4;

            if (this.zoom <= 1) {
              // Zoom in at most one hour
              this.zoom = 1;
            }

            this.hoursPerRuler = this.zoom;
          }

          this.clearCanvas(); // // startTimestamp = current middle time - zoom /2

          this.startTimestamp = middleTime - this.hoursPerRuler * 3600 * 1000 / 2;
          this.init(this.startTimestamp, this.timecell, true);
          this.drawPalyBar();
        }
        /**
         * Get the mouse POSx
         * @param  e event
         */

      }, {
        key: "get_cursor_x_position",
        value: function get_cursor_x_position(e) {
          var posx = 0;
          var posy = 0;

          if (!e) {
            e = window.event;
          }

          if (e.offsetX || e.offsetY) {
            posx = e.offsetX;
            posy = e.offsetY;
          }

          return {
            posX: posx,
            posY: posy
          };
        }
        /**
         * The offset of the left start time, returns the unit ms
         * @param  timestamp The time stamp
         * @param  step The offset
         */

      }, {
        key: "ms_to_next_step",
        value: function ms_to_next_step(timestamp, step) {
          var remainder = timestamp % step;
          return remainder ? step - remainder : 0;
        }
        /**
         * Set the time to jump to the middle red line
         *  @param  time Unit of ms
         */

      }, {
        key: "set_time_to_middle",
        value: function set_time_to_middle(time) {
          if (this.ctx) {
            this.clearCanvas();
            this.startTimestamp = time - this.hoursPerRuler * this.playBarDistanceLeft * 3600 * 1000;
            this.currentTimestamp = time;
            this.drawPalyBar();
            this.init(this.startTimestamp, this.timecell, true);
          }
        }
        /**
         * 清除canvas 每次重新绘制需要先清除
         */

      }, {
        key: "clearCanvas",
        value: function clearCanvas() {
          this.ctx.clearRect(0, 0, this.canvasW, this.scale * 7.5);
        }
        /**
         * Click to play
         */

      }, {
        key: "onPlayClick",
        value: function onPlayClick() {
          var _this3 = this;

          // this.setTimeMove = undefined;
          this.isPlayClick = true;
          this.setTimeMove = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["interval"])(this.speed).subscribe(function (d) {
            _this3.playTime = Number(_this3.playTime) + 1 * 1000;

            _this3.playClick.emit(_this3.playTime);

            _this3.set_time_to_middle(_this3.playTime);
          });
        }
        /**
         * Click on the pause
         */

      }, {
        key: "onPauseClick",
        value: function onPauseClick() {
          this.isPlayClick = false;

          if (this.setTimeMove) {
            // this.setTimeMove = undefined;
            this.setTimeMove.unsubscribe();
            this.playClick.emit(this.playTime);
          }
        }
        /**
         * Change video segment
         */

      }, {
        key: "changeVideo",
        value: function changeVideo() {
          var cells = [{
            beginTime: new Date().getTime() - 1 * 1000 * 3600,
            endTime: new Date().getTime() + 2 * 1000 * 3600,
            style: {
              background: 'rgba(132, 244, 180, 0.498039)'
            }
          }];
          this.clearCanvas();
          this.drawPalyBar();
          this.init(this.startTimestamp, cells, true);
        }
        /**
         * Temporary unused
         * @param event MatDatepickerInputEvent(Date)
         */

      }, {
        key: "selectedTime",
        value: function selectedTime(event) {
          var timestamp = new Date(event.value.getTime());
          this.set_time_to_middle(Number(timestamp));
        }
        /**
         * Temporary unused
         * @param event MouseEvent
         */

      }, {
        key: "onDragStart",
        value: function onDragStart(e) {
          e.preventDefault();
          return false;
        }
      }, {
        key: "scale",
        get: function get() {
          return this.canvasHeight / 4.55;
        }
      }, {
        key: "canvasHeight",
        get: function get() {
          return this._canvasHeight;
        },
        set: function set(value) {
          this._canvasHeight = value;
        }
      }, {
        key: "playTime",
        get: function get() {
          return this._playTime;
        },
        set: function set(value) {
          if (value instanceof String) {
            this._playTime = new Date(value).getTime();
          } else if (value instanceof Date) {
            this._playTime = value.getTime();
          } else if (typeof value === 'number') {
            this._playTime = Number(value);
          }
        }
      }, {
        key: "speed",
        get: function get() {
          return 1 / this._speed * 1000;
        },
        set: function set(value) {
          this._speed = value;
        }
      }, {
        key: "forWardValue",
        get: function get() {
          return this._forWardValue * 1000;
        },
        set: function set(value) {
          this._forWardValue = value;
        }
      }, {
        key: "startTimeThreshold",
        get: function get() {
          return this._startTimeThreshold;
        },
        set: function set(value) {
          if (value instanceof String) {
            this._startTimeThreshold = new Date(value).getTime();
          } else if (value instanceof Date) {
            this._startTimeThreshold = value.getTime();
          } else if (typeof value === 'number') {
            this._startTimeThreshold = Number(value);
          }
        }
      }, {
        key: "endTimeThreshold",
        get: function get() {
          return this._endTimeThreshold;
        },
        set: function set(value) {
          if (value instanceof String) {
            this._endTimeThreshold = new Date(value).getTime();
          } else if (value instanceof Date) {
            this._endTimeThreshold = value.getTime();
          } else if (typeof value === 'number') {
            this._endTimeThreshold = Number(value);
          }
        }
      }]);

      return TimelineComponent;
    }();

    TimelineComponent.ɵfac = function TimelineComponent_Factory(t) {
      return new (t || TimelineComponent)();
    };

    TimelineComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
      type: TimelineComponent,
      selectors: [["ngx-video-timeline"]],
      viewQuery: function TimelineComponent_Query(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstaticViewQuery"](_c0, true);
        }

        if (rf & 2) {
          var _t;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.canvasExp = _t.first);
        }
      },
      hostBindings: function TimelineComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("resize", function TimelineComponent_resize_HostBindingHandler($event) {
            return ctx.onResize($event);
          }, false, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresolveWindow"])("keydown", function TimelineComponent_keydown_HostBindingHandler($event) {
            return ctx.onKeyDown($event);
          }, false, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresolveWindow"])("keyup", function TimelineComponent_keyup_HostBindingHandler($event) {
            return ctx.onKeyUp($event);
          }, false, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresolveWindow"]);
        }
      },
      inputs: {
        canvasHeight: "canvasHeight",
        playTime: "playTime",
        speed: "speed",
        forWardValue: "forWardValue",
        startTimeThreshold: "startTimeThreshold",
        endTimeThreshold: "endTimeThreshold",
        borderColor: "borderColor",
        bgColor: "bgColor",
        bottomLineColor: "bottomLineColor",
        verticalBarColor: "verticalBarColor",
        playBarColor: "playBarColor",
        videoCells: "videoCells",
        isPlayClick: "isPlayClick"
      },
      outputs: {
        playClick: "playClick",
        mouseUp: "mouseUp",
        mouseDown: "mouseDown",
        keyUp: "keyUp",
        keyDown: "keyDown"
      },
      features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
      decls: 2,
      vars: 0,
      consts: [[1, "canvas", 2, "cursor", "pointer", "border", "1px solid borderColor", "background-color", "bgColor", 3, "dragstart", "mouseup", "mousewheel", "mousedown", "mousemove", "mouseout"], ["timeline", ""]],
      template: function TimelineComponent_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "canvas", 0, 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("dragstart", function TimelineComponent_Template_canvas_dragstart_0_listener($event) {
            return ctx.onDragStart($event);
          })("mouseup", function TimelineComponent_Template_canvas_mouseup_0_listener($event) {
            return ctx.mouseupFunc($event);
          })("mousewheel", function TimelineComponent_Template_canvas_mousewheel_0_listener($event) {
            return ctx.mousewheelFunc($event);
          })("mousedown", function TimelineComponent_Template_canvas_mousedown_0_listener($event) {
            return ctx.mousedownFunc($event);
          })("mousemove", function TimelineComponent_Template_canvas_mousemove_0_listener($event) {
            return ctx.mousemoveFunc($event);
          })("mouseout", function TimelineComponent_Template_canvas_mouseout_0_listener() {
            return ctx.mouseoutFunc();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      },
      styles: [".canvas[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 100%;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2dqMDA5L2xlbm9uL25neC12aWRlby10aW1lbGluZS9wcm9qZWN0cy90aW1lbGluZS9zcmMvbGliL3RpbWVsaW5lLmNvbXBvbmVudC5zY3NzIiwic3JjL2xpYi90aW1lbGluZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFdBQUE7RUFDQSxZQUFBO0FDQ0oiLCJmaWxlIjoic3JjL2xpYi90aW1lbGluZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jYW52YXMge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbn0iLCIuY2FudmFzIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbn0iXX0= */"]
    });
    /*@__PURE__*/

    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](TimelineComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'ngx-video-timeline',
          templateUrl: './timeline.component.html',
          styleUrls: ['./timeline.component.scss']
        }]
      }], function () {
        return [];
      }, {
        canvasHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        playTime: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        speed: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        forWardValue: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        startTimeThreshold: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        endTimeThreshold: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        borderColor: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        bgColor: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        bottomLineColor: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        verticalBarColor: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        playBarColor: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        videoCells: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        isPlayClick: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        playClick: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        mouseUp: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        mouseDown: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        keyUp: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        keyDown: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        canvasExp: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
          args: ['timeline', {
            "static": true
          }]
        }],
        onResize: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['window:resize', ['$event']]
        }],
        onKeyDown: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['window:keydown', ['$event']]
        }],
        onKeyUp: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['window:keyup', ['$event']]
        }]
      });
    })();
    /***/

  },

  /***/
  "./projects/timeline/src/lib/timeline.module.ts":
  /*!******************************************************!*\
    !*** ./projects/timeline/src/lib/timeline.module.ts ***!
    \******************************************************/

  /*! exports provided: TimelineModule */

  /***/
  function projectsTimelineSrcLibTimelineModuleTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TimelineModule", function () {
      return TimelineModule;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var _timeline_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./timeline.component */
    "./projects/timeline/src/lib/timeline.component.ts");

    var TimelineModule = function TimelineModule() {
      _classCallCheck(this, TimelineModule);
    };

    TimelineModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
      type: TimelineModule
    });
    TimelineModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
      factory: function TimelineModule_Factory(t) {
        return new (t || TimelineModule)();
      },
      imports: [[]]
    });

    (function () {
      (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](TimelineModule, {
        declarations: [_timeline_component__WEBPACK_IMPORTED_MODULE_1__["TimelineComponent"]],
        exports: [_timeline_component__WEBPACK_IMPORTED_MODULE_1__["TimelineComponent"]]
      });
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](TimelineModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          declarations: [_timeline_component__WEBPACK_IMPORTED_MODULE_1__["TimelineComponent"]],
          imports: [],
          exports: [_timeline_component__WEBPACK_IMPORTED_MODULE_1__["TimelineComponent"]]
        }]
      }], null, null);
    })();
    /***/

  },

  /***/
  "./src/app/app.component.ts":
  /*!**********************************!*\
    !*** ./src/app/app.component.ts ***!
    \**********************************/

  /*! exports provided: AppComponent */

  /***/
  function srcAppAppComponentTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AppComponent", function () {
      return AppComponent;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var _projects_timeline_src_lib_timeline_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../../projects/timeline/src/lib/timeline.component */
    "./projects/timeline/src/lib/timeline.component.ts");

    var AppComponent = /*#__PURE__*/function () {
      function AppComponent() {
        _classCallCheck(this, AppComponent);

        this.title = 'ngx-video-timeline';
        this.speed = 10;
        this.isPlayClick = false;
        this.canvasHeight = 80;
        this.startTimeThreshold = new Date().getTime() - 1 * 3600 * 1000;
        this.endTimeThreshold = new Date().getTime() + 1 * 3600 * 1000;
        this.videoCells = [];
        this.playTime = new Date();
      }

      _createClass(AppComponent, [{
        key: "onPlay",
        value: function onPlay() {
          this.isPlayClick = true;
          this.startTimeThreshold = new Date().getTime() - 1 * 3600 * 1000;
        }
      }, {
        key: "onPause",
        value: function onPause() {
          this.isPlayClick = false; // this.endTimeThreshold = new Date().getTime() + 1 * 3600 * 1000;
        }
      }, {
        key: "onPlayClick",
        value: function onPlayClick(date) {// console.log(new Date(date));
          // this.canvasHeight = 60;
        }
      }, {
        key: "selectedTime",
        value: function selectedTime(date) {
          this.playTime = date.value;
        }
      }, {
        key: "changeVideo",
        value: function changeVideo() {
          this.videoCells = [{
            beginTime: new Date().getTime() - 1 * 3600 * 1000,
            endTime: new Date().getTime() + 1 * 3600 * 1000,
            style: {
              background: '#f3e5e4'
            }
          }];
        }
      }, {
        key: "ngOnInit",
        value: function ngOnInit() {}
      }]);

      return AppComponent;
    }();

    AppComponent.ɵfac = function AppComponent_Factory(t) {
      return new (t || AppComponent)();
    };

    AppComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
      type: AppComponent,
      selectors: [["app-root"]],
      decls: 10,
      vars: 7,
      consts: [["fxLayout", "row", "fxLayoutAlign", "start center", 1, "canvas-box"], [1, "canvas-class", 3, "playTime", "isPlayClick", "videoCells", "startTimeThreshold", "endTimeThreshold", "canvasHeight", "speed", "playClick"], ["fxLayout", "row", "fxLayoutAlign", "start center"], ["mat-button", "", 3, "click"]],
      template: function AppComponent_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "ngx-video-timeline", 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("playClick", function AppComponent_Template_ngx_video_timeline_playClick_1_listener($event) {
            return ctx.onPlayClick($event);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "button", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function AppComponent_Template_button_click_4_listener() {
            return ctx.onPlay();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5, "play");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "button", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function AppComponent_Template_button_click_6_listener() {
            return ctx.onPause();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](7, "pause");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "button", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function AppComponent_Template_button_click_8_listener() {
            return ctx.changeVideo();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](9, "changeVideos");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("playTime", ctx.playTime)("isPlayClick", ctx.isPlayClick)("videoCells", ctx.videoCells)("startTimeThreshold", ctx.startTimeThreshold)("endTimeThreshold", ctx.endTimeThreshold)("canvasHeight", ctx.canvasHeight)("speed", ctx.speed);
        }
      },
      directives: [_projects_timeline_src_lib_timeline_component__WEBPACK_IMPORTED_MODULE_1__["TimelineComponent"]],
      styles: [".video-box[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.video-box[_ngcontent-%COMP%]   .canvas-box[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.video-box[_ngcontent-%COMP%]   .canvas-class[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 100%;\n}\n.video-box[_ngcontent-%COMP%]   .video[_ngcontent-%COMP%]   mat-video[_ngcontent-%COMP%] {\n  margin-bottom: 40px;\n  height: 20vh;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2dqMDA5L2xlbm9uL25neC12aWRlby10aW1lbGluZS9zcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyIsIi4uLy4uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksV0FBQTtBQ0NKO0FEQ0k7RUFDRSxXQUFBO0FDQ047QURFSTtFQUNFLFdBQUE7RUFDQSxZQUFBO0FDQU47QURNTTtFQUNFLG1CQUFBO0VBQ0EsWUFBQTtBQ0pSIiwiZmlsZSI6Ii4uLy4uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnZpZGVvLWJveCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIFxuICAgIC5jYW52YXMtYm94IHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cbiAgXG4gICAgLmNhbnZhcy1jbGFzcyB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIC8vaGVpZ2h0OiA5MXB4O1xuICAgIH1cbiAgXG4gICAgLnZpZGVvIHtcbiAgICAgIC8vIG1hcmdpbjogMzBweDtcbiAgICAgIG1hdC12aWRlbyB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XG4gICAgICAgIGhlaWdodDogMjB2aDtcbiAgXG4gICAgICB9XG4gICAgfVxuICB9XG4gICIsIi52aWRlby1ib3gge1xuICB3aWR0aDogMTAwJTtcbn1cbi52aWRlby1ib3ggLmNhbnZhcy1ib3gge1xuICB3aWR0aDogMTAwJTtcbn1cbi52aWRlby1ib3ggLmNhbnZhcy1jbGFzcyB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG59XG4udmlkZW8tYm94IC52aWRlbyBtYXQtdmlkZW8ge1xuICBtYXJnaW4tYm90dG9tOiA0MHB4O1xuICBoZWlnaHQ6IDIwdmg7XG59Il19 */"]
    });
    /*@__PURE__*/

    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](AppComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'app-root',
          templateUrl: './app.component.html',
          styleUrls: ['./app.component.scss']
        }]
      }], function () {
        return [];
      }, null);
    })();
    /***/

  },

  /***/
  "./src/app/app.module.ts":
  /*!*******************************!*\
    !*** ./src/app/app.module.ts ***!
    \*******************************/

  /*! exports provided: AppModule */

  /***/
  function srcAppAppModuleTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AppModule", function () {
      return AppModule;
    });
    /* harmony import */


    var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/platform-browser */
    "./node_modules/@angular/platform-browser/__ivy_ngcc__/fesm2015/platform-browser.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var _app_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./app.component */
    "./src/app/app.component.ts");
    /* harmony import */


    var projects_timeline_src_lib_timeline_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! projects/timeline/src/lib/timeline.module */
    "./projects/timeline/src/lib/timeline.module.ts");

    var AppModule = function AppModule() {
      _classCallCheck(this, AppModule);
    };

    AppModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
      type: AppModule,
      bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_2__["AppComponent"]]
    });
    AppModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
      factory: function AppModule_Factory(t) {
        return new (t || AppModule)();
      },
      providers: [],
      imports: [[_angular_platform_browser__WEBPACK_IMPORTED_MODULE_0__["BrowserModule"], projects_timeline_src_lib_timeline_module__WEBPACK_IMPORTED_MODULE_3__["TimelineModule"]]]
    });

    (function () {
      (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](AppModule, {
        declarations: [_app_component__WEBPACK_IMPORTED_MODULE_2__["AppComponent"]],
        imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_0__["BrowserModule"], projects_timeline_src_lib_timeline_module__WEBPACK_IMPORTED_MODULE_3__["TimelineModule"]]
      });
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](AppModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{
          declarations: [_app_component__WEBPACK_IMPORTED_MODULE_2__["AppComponent"]],
          imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_0__["BrowserModule"], projects_timeline_src_lib_timeline_module__WEBPACK_IMPORTED_MODULE_3__["TimelineModule"]],
          providers: [],
          bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_2__["AppComponent"]]
        }]
      }], null, null);
    })();
    /***/

  },

  /***/
  "./src/environments/environment.ts":
  /*!*****************************************!*\
    !*** ./src/environments/environment.ts ***!
    \*****************************************/

  /*! exports provided: environment */

  /***/
  function srcEnvironmentsEnvironmentTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "environment", function () {
      return environment;
    }); // This file can be replaced during build by using the `fileReplacements` array.
    // `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
    // The list of file replacements can be found in `angular.json`.


    var environment = {
      production: false
    };
    /*
     * For easier debugging in development mode, you can import the following file
     * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
     *
     * This import should be commented out in production mode because it will have a negative impact
     * on performance if an error is thrown.
     */
    // import 'zone.js/dist/zone-error';  // Included with Angular CLI.

    /***/
  },

  /***/
  "./src/main.ts":
  /*!*********************!*\
    !*** ./src/main.ts ***!
    \*********************/

  /*! no exports provided */

  /***/
  function srcMainTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var _environments_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./environments/environment */
    "./src/environments/environment.ts");
    /* harmony import */


    var _app_app_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./app/app.module */
    "./src/app/app.module.ts");
    /* harmony import */


    var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! @angular/platform-browser */
    "./node_modules/@angular/platform-browser/__ivy_ngcc__/fesm2015/platform-browser.js");

    if (_environments_environment__WEBPACK_IMPORTED_MODULE_1__["environment"].production) {
      Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["enableProdMode"])();
    }

    _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__["platformBrowser"]().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_2__["AppModule"])["catch"](function (err) {
      return console.error(err);
    });
    /***/

  },

  /***/
  0:
  /*!***************************!*\
    !*** multi ./src/main.ts ***!
    \***************************/

  /*! no static exports found */

  /***/
  function _(module, exports, __webpack_require__) {
    module.exports = __webpack_require__(
    /*! /home/gj009/lenon/ngx-video-timeline/src/main.ts */
    "./src/main.ts");
    /***/
  }
}, [[0, "runtime", "vendor"]]]);
//# sourceMappingURL=main-es5.js.map